{"help": "Help on StringIO object:\n\nclass StringIO(_TextIOBase)\n |  Text I/O implementation using an in-memory buffer.\n |  \n |  The initial_value argument sets the value of object.  The newline\n |  argument is like the one of TextIOWrapper's constructor.\n |  \n |  Method resolution order:\n |      StringIO\n |      _TextIOBase\n |      _IOBase\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  __getstate__(...)\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  __next__(self, /)\n |      Implement next(self).\n |  \n |  __setstate__(...)\n |  \n |  close(self, /)\n |      Close the IO object.\n |      \n |      Attempting any further operation after the object is closed\n |      will raise a ValueError.\n |      \n |      This method has no effect if the file is already closed.\n |  \n |  getvalue(self, /)\n |      Retrieve the entire contents of the object.\n |  \n |  read(self, size=None, /)\n |      Read at most size characters, returned as a string.\n |      \n |      If the argument is negative or omitted, read until EOF\n |      is reached. Return an empty string at EOF.\n |  \n |  readable(self, /)\n |      Returns True if the IO object can be read.\n |  \n |  readline(self, size=None, /)\n |      Read until newline or EOF.\n |      \n |      Returns an empty string if EOF is hit immediately.\n |  \n |  seek(self, pos, whence=0, /)\n |      Change stream position.\n |      \n |      Seek to character offset pos relative to position indicated by whence:\n |          0  Start of stream (the default).  pos should be >= 0;\n |          1  Current position - pos must be 0;\n |          2  End of stream - pos must be 0.\n |      Returns the new absolute position.\n |  \n |  seekable(self, /)\n |      Returns True if the IO object can be seeked.\n |  \n |  tell(self, /)\n |      Tell the current file position.\n |  \n |  truncate(self, pos=None, /)\n |      Truncate size to pos.\n |      \n |      The pos argument defaults to the current file position, as\n |      returned by tell().  The current file position is unchanged.\n |      Returns the new absolute position.\n |  \n |  writable(self, /)\n |      Returns True if the IO object can be written.\n |  \n |  write(self, s, /)\n |      Write string to file.\n |      \n |      Returns the number of characters written, which is always equal to\n |      the length of the string.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  closed\n |  \n |  line_buffering\n |  \n |  newlines\n |      Line endings translated so far.\n |      \n |      Only line endings translated during reading are considered.\n |      \n |      Subclasses should override.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from _TextIOBase:\n |  \n |  detach(...)\n |      Separate the underlying buffer from the TextIOBase and return it.\n |      \n |      After the underlying buffer has been detached, the TextIO is in an\n |      unusable state.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from _TextIOBase:\n |  \n |  encoding\n |      Encoding of the text stream.\n |      \n |      Subclasses should override.\n |  \n |  errors\n |      The error setting of the decoder or encoder.\n |      \n |      Subclasses should override.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from _IOBase:\n |  \n |  __del__(...)\n |  \n |  __enter__(...)\n |  \n |  __exit__(...)\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  fileno(self, /)\n |      Returns underlying file descriptor if one exists.\n |      \n |      OSError is raised if the IO object does not use a file descriptor.\n |  \n |  flush(self, /)\n |      Flush write buffers, if applicable.\n |      \n |      This is not implemented for read-only and non-blocking streams.\n |  \n |  isatty(self, /)\n |      Return whether this is an 'interactive' stream.\n |      \n |      Return False if it can't be determined.\n |  \n |  readlines(self, hint=-1, /)\n |      Return a list of lines from the stream.\n |      \n |      hint can be specified to control the number of lines read: no more\n |      lines will be read if the total size (in bytes/characters) of all\n |      lines so far exceeds hint.\n |  \n |  writelines(self, lines, /)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from _IOBase:\n |  \n |  __dict__\n\n------------ Dictionary Contents ------------\n('Help on StringIO object:\\n'\n '\\n'\n 'class StringIO(_TextIOBase)\\n'\n ' |  Text I/O implementation using an in-memory buffer.\\n'\n ' |  \\n'\n ' |  The initial_value argument sets the value of object.  The newline\\n'\n \" |  argument is like the one of TextIOWrapper's constructor.\\n\"\n ' |  \\n'\n ' |  Method resolution order:\\n'\n ' |      StringIO\\n'\n ' |      _TextIOBase\\n'\n ' |      _IOBase\\n'\n ' |      builtins.object\\n'\n ' |  \\n'\n ' |  Methods defined here:\\n'\n ' |  \\n'\n ' |  __getstate__(...)\\n'\n ' |  \\n'\n ' |  __init__(self, /, *args, **kwargs)\\n'\n ' |      Initialize self.  See help(type(self)) for accurate signature.\\n'\n ' |  \\n'\n ' |  __new__(*args, **kwargs) from builtins.type\\n'\n ' |      Create and return a new object.  See help(type) for accurate '\n 'signature.\\n'\n ' |  \\n'\n ' |  __next__(self, /)\\n'\n ' |      Implement next(self).\\n'\n ' |  \\n'\n ' |  __setstate__(...)\\n'\n ' |  \\n'\n ' |  close(self, /)\\n'\n ' |      Close the IO object.\\n'\n ' |      \\n'\n ' |      Attempting any further operation after the object is closed\\n'\n ' |      will raise a ValueError.\\n'\n ' |      \\n'\n ' |      This method has no effect if the file is already closed.\\n'\n ' |  \\n'\n ' |  getvalue(self, /)\\n'\n ' |      Retrieve the entire contents of the object.\\n'\n ' |  \\n'\n ' |  read(self, size=None, /)\\n'\n ' |      Read at most size characters, returned as a string.\\n'\n ' |      \\n'\n ' |      If the argument is negative or omitted, read until EOF\\n'\n ' |      is reached. Return an empty string at EOF.\\n'\n ' |  \\n'\n ' |  readable(self, /)\\n'\n ' |      Returns True if the IO object can be read.\\n'\n ' |  \\n'\n ' |  readline(self, size=None, /)\\n'\n ' |      Read until newline or EOF.\\n'\n ' |      \\n'\n ' |      Returns an empty string if EOF is hit immediately.\\n'\n ' |  \\n'\n ' |  seek(self, pos, whence=0, /)\\n'\n ' |      Change stream position.\\n'\n ' |      \\n'\n ' |      Seek to character offset pos relative to position indicated by '\n 'whence:\\n'\n ' |          0  Start of stream (the default).  pos should be >= 0;\\n'\n ' |          1  Current position - pos must be 0;\\n'\n ' |          2  End of stream - pos must be 0.\\n'\n ' |      Returns the new absolute position.\\n'\n ' |  \\n'\n ' |  seekable(self, /)\\n'\n ' |      Returns True if the IO object can be seeked.\\n'\n ' |  \\n'\n ' |  tell(self, /)\\n'\n ' |      Tell the current file position.\\n'\n ' |  \\n'\n ' |  truncate(self, pos=None, /)\\n'\n ' |      Truncate size to pos.\\n'\n ' |      \\n'\n ' |      The pos argument defaults to the current file position, as\\n'\n ' |      returned by tell().  The current file position is unchanged.\\n'\n ' |      Returns the new absolute position.\\n'\n ' |  \\n'\n ' |  writable(self, /)\\n'\n ' |      Returns True if the IO object can be written.\\n'\n ' |  \\n'\n ' |  write(self, s, /)\\n'\n ' |      Write string to file.\\n'\n ' |      \\n'\n ' |      Returns the number of characters written, which is always equal to\\n'\n ' |      the length of the string.\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Data descriptors defined here:\\n'\n ' |  \\n'\n ' |  closed\\n'\n ' |  \\n'\n ' |  line_buffering\\n'\n ' |  \\n'\n ' |  newlines\\n'\n ' |      Line endings translated so far.\\n'\n ' |      \\n'\n ' |      Only line endings translated during reading are considered.\\n'\n ' |      \\n'\n ' |      Subclasses should override.\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Methods inherited from _TextIOBase:\\n'\n ' |  \\n'\n ' |  detach(...)\\n'\n ' |      Separate the underlying buffer from the TextIOBase and return it.\\n'\n ' |      \\n'\n ' |      After the underlying buffer has been detached, the TextIO is in an\\n'\n ' |      unusable state.\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Data descriptors inherited from _TextIOBase:\\n'\n ' |  \\n'\n ' |  encoding\\n'\n ' |      Encoding of the text stream.\\n'\n ' |      \\n'\n ' |      Subclasses should override.\\n'\n ' |  \\n'\n ' |  errors\\n'\n ' |      The error setting of the decoder or encoder.\\n'\n ' |      \\n'\n ' |      Subclasses should override.\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Methods inherited from _IOBase:\\n'\n ' |  \\n'\n ' |  __del__(...)\\n'\n ' |  \\n'\n ' |  __enter__(...)\\n'\n ' |  \\n'\n ' |  __exit__(...)\\n'\n ' |  \\n'\n ' |  __iter__(self, /)\\n'\n ' |      Implement iter(self).\\n'\n ' |  \\n'\n ' |  fileno(self, /)\\n'\n ' |      Returns underlying file descriptor if one exists.\\n'\n ' |      \\n'\n ' |      OSError is raised if the IO object does not use a file descriptor.\\n'\n ' |  \\n'\n ' |  flush(self, /)\\n'\n ' |      Flush write buffers, if applicable.\\n'\n ' |      \\n'\n ' |      This is not implemented for read-only and non-blocking streams.\\n'\n ' |  \\n'\n ' |  isatty(self, /)\\n'\n \" |      Return whether this is an 'interactive' stream.\\n\"\n ' |      \\n'\n \" |      Return False if it can't be determined.\\n\"\n ' |  \\n'\n ' |  readlines(self, hint=-1, /)\\n'\n ' |      Return a list of lines from the stream.\\n'\n ' |      \\n'\n ' |      hint can be specified to control the number of lines read: no more\\n'\n ' |      lines will be read if the total size (in bytes/characters) of all\\n'\n ' |      lines so far exceeds hint.\\n'\n ' |  \\n'\n ' |  writelines(self, lines, /)\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Data descriptors inherited from _IOBase:\\n'\n ' |  \\n'\n ' |  __dict__\\n'\n '\\n')\n------------ Dictionary Contents ------------\n('Help on StringIO object:\\n'\n '\\n'\n 'class StringIO(_TextIOBase)\\n'\n ' |  Text I/O implementation using an in-memory buffer.\\n'\n ' |  \\n'\n ' |  The initial_value argument sets the value of object.  The newline\\n'\n \" |  argument is like the one of TextIOWrapper's constructor.\\n\"\n ' |  \\n'\n ' |  Method resolution order:\\n'\n ' |      StringIO\\n'\n ' |      _TextIOBase\\n'\n ' |      _IOBase\\n'\n ' |      builtins.object\\n'\n ' |  \\n'\n ' |  Methods defined here:\\n'\n ' |  \\n'\n ' |  __getstate__(...)\\n'\n ' |  \\n'\n ' |  __init__(self, /, *args, **kwargs)\\n'\n ' |      Initialize self.  See help(type(self)) for accurate signature.\\n'\n ' |  \\n'\n ' |  __new__(*args, **kwargs) from builtins.type\\n'\n ' |      Create and return a new object.  See help(type) for accurate '\n 'signature.\\n'\n ' |  \\n'\n ' |  __next__(self, /)\\n'\n ' |      Implement next(self).\\n'\n ' |  \\n'\n ' |  __setstate__(...)\\n'\n ' |  \\n'\n ' |  close(self, /)\\n'\n ' |      Close the IO object.\\n'\n ' |      \\n'\n ' |      Attempting any further operation after the object is closed\\n'\n ' |      will raise a ValueError.\\n'\n ' |      \\n'\n ' |      This method has no effect if the file is already closed.\\n'\n ' |  \\n'\n ' |  getvalue(self, /)\\n'\n ' |      Retrieve the entire contents of the object.\\n'\n ' |  \\n'\n ' |  read(self, size=None, /)\\n'\n ' |      Read at most size characters, returned as a string.\\n'\n ' |      \\n'\n ' |      If the argument is negative or omitted, read until EOF\\n'\n ' |      is reached. Return an empty string at EOF.\\n'\n ' |  \\n'\n ' |  readable(self, /)\\n'\n ' |      Returns True if the IO object can be read.\\n'\n ' |  \\n'\n ' |  readline(self, size=None, /)\\n'\n ' |      Read until newline or EOF.\\n'\n ' |      \\n'\n ' |      Returns an empty string if EOF is hit immediately.\\n'\n ' |  \\n'\n ' |  seek(self, pos, whence=0, /)\\n'\n ' |      Change stream position.\\n'\n ' |      \\n'\n ' |      Seek to character offset pos relative to position indicated by '\n 'whence:\\n'\n ' |          0  Start of stream (the default).  pos should be >= 0;\\n'\n ' |          1  Current position - pos must be 0;\\n'\n ' |          2  End of stream - pos must be 0.\\n'\n ' |      Returns the new absolute position.\\n'\n ' |  \\n'\n ' |  seekable(self, /)\\n'\n ' |      Returns True if the IO object can be seeked.\\n'\n ' |  \\n'\n ' |  tell(self, /)\\n'\n ' |      Tell the current file position.\\n'\n ' |  \\n'\n ' |  truncate(self, pos=None, /)\\n'\n ' |      Truncate size to pos.\\n'\n ' |      \\n'\n ' |      The pos argument defaults to the current file position, as\\n'\n ' |      returned by tell().  The current file position is unchanged.\\n'\n ' |      Returns the new absolute position.\\n'\n ' |  \\n'\n ' |  writable(self, /)\\n'\n ' |      Returns True if the IO object can be written.\\n'\n ' |  \\n'\n ' |  write(self, s, /)\\n'\n ' |      Write string to file.\\n'\n ' |      \\n'\n ' |      Returns the number of characters written, which is always equal to\\n'\n ' |      the length of the string.\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Data descriptors defined here:\\n'\n ' |  \\n'\n ' |  closed\\n'\n ' |  \\n'\n ' |  line_buffering\\n'\n ' |  \\n'\n ' |  newlines\\n'\n ' |      Line endings translated so far.\\n'\n ' |      \\n'\n ' |      Only line endings translated during reading are considered.\\n'\n ' |      \\n'\n ' |      Subclasses should override.\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Methods inherited from _TextIOBase:\\n'\n ' |  \\n'\n ' |  detach(...)\\n'\n ' |      Separate the underlying buffer from the TextIOBase and return it.\\n'\n ' |      \\n'\n ' |      After the underlying buffer has been detached, the TextIO is in an\\n'\n ' |      unusable state.\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Data descriptors inherited from _TextIOBase:\\n'\n ' |  \\n'\n ' |  encoding\\n'\n ' |      Encoding of the text stream.\\n'\n ' |      \\n'\n ' |      Subclasses should override.\\n'\n ' |  \\n'\n ' |  errors\\n'\n ' |      The error setting of the decoder or encoder.\\n'\n ' |      \\n'\n ' |      Subclasses should override.\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Methods inherited from _IOBase:\\n'\n ' |  \\n'\n ' |  __del__(...)\\n'\n ' |  \\n'\n ' |  __enter__(...)\\n'\n ' |  \\n'\n ' |  __exit__(...)\\n'\n ' |  \\n'\n ' |  __iter__(self, /)\\n'\n ' |      Implement iter(self).\\n'\n ' |  \\n'\n ' |  fileno(self, /)\\n'\n ' |      Returns underlying file descriptor if one exists.\\n'\n ' |      \\n'\n ' |      OSError is raised if the IO object does not use a file descriptor.\\n'\n ' |  \\n'\n ' |  flush(self, /)\\n'\n ' |      Flush write buffers, if applicable.\\n'\n ' |      \\n'\n ' |      This is not implemented for read-only and non-blocking streams.\\n'\n ' |  \\n'\n ' |  isatty(self, /)\\n'\n \" |      Return whether this is an 'interactive' stream.\\n\"\n ' |      \\n'\n \" |      Return False if it can't be determined.\\n\"\n ' |  \\n'\n ' |  readlines(self, hint=-1, /)\\n'\n ' |      Return a list of lines from the stream.\\n'\n ' |      \\n'\n ' |      hint can be specified to control the number of lines read: no more\\n'\n ' |      lines will be read if the total size (in bytes/characters) of all\\n'\n ' |      lines so far exceeds hint.\\n'\n ' |  \\n'\n ' |  writelines(self, lines, /)\\n'\n ' |  \\n'\n ' |  ----------------------------------------------------------------------\\n'\n ' |  Data descriptors inherited from _IOBase:\\n'\n ' |  \\n'\n ' |  __dict__\\n'\n '\\n'\n '------------ Dictionary Contents ------------\\n'\n \"('Help on StringIO object:\\\\n'\\n\"\n \" '\\\\n'\\n\"\n \" 'class StringIO(_TextIOBase)\\\\n'\\n\"\n \" ' |  Text I/O implementation using an in-memory buffer.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  The initial_value argument sets the value of object.  The newline\\\\n'\\n\"\n ' \" |  argument is like the one of TextIOWrapper\\'s constructor.\\\\n\"\\n'\n \" ' |  \\\\n'\\n\"\n \" ' |  Method resolution order:\\\\n'\\n\"\n \" ' |      StringIO\\\\n'\\n\"\n \" ' |      _TextIOBase\\\\n'\\n\"\n \" ' |      _IOBase\\\\n'\\n\"\n \" ' |      builtins.object\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  Methods defined here:\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __getstate__(...)\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __init__(self, /, *args, **kwargs)\\\\n'\\n\"\n \" ' |      Initialize self.  See help(type(self)) for accurate \"\n \"signature.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __new__(*args, **kwargs) from builtins.type\\\\n'\\n\"\n \" ' |      Create and return a new object.  See help(type) for accurate '\\n\"\n \" 'signature.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __next__(self, /)\\\\n'\\n\"\n \" ' |      Implement next(self).\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __setstate__(...)\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  close(self, /)\\\\n'\\n\"\n \" ' |      Close the IO object.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      Attempting any further operation after the object is closed\\\\n'\\n\"\n \" ' |      will raise a ValueError.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      This method has no effect if the file is already closed.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  getvalue(self, /)\\\\n'\\n\"\n \" ' |      Retrieve the entire contents of the object.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  read(self, size=None, /)\\\\n'\\n\"\n \" ' |      Read at most size characters, returned as a string.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      If the argument is negative or omitted, read until EOF\\\\n'\\n\"\n \" ' |      is reached. Return an empty string at EOF.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  readable(self, /)\\\\n'\\n\"\n \" ' |      Returns True if the IO object can be read.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  readline(self, size=None, /)\\\\n'\\n\"\n \" ' |      Read until newline or EOF.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      Returns an empty string if EOF is hit immediately.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  seek(self, pos, whence=0, /)\\\\n'\\n\"\n \" ' |      Change stream position.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      Seek to character offset pos relative to position indicated by '\\n\"\n \" 'whence:\\\\n'\\n\"\n \" ' |          0  Start of stream (the default).  pos should be >= 0;\\\\n'\\n\"\n \" ' |          1  Current position - pos must be 0;\\\\n'\\n\"\n \" ' |          2  End of stream - pos must be 0.\\\\n'\\n\"\n \" ' |      Returns the new absolute position.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  seekable(self, /)\\\\n'\\n\"\n \" ' |      Returns True if the IO object can be seeked.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  tell(self, /)\\\\n'\\n\"\n \" ' |      Tell the current file position.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  truncate(self, pos=None, /)\\\\n'\\n\"\n \" ' |      Truncate size to pos.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      The pos argument defaults to the current file position, as\\\\n'\\n\"\n \" ' |      returned by tell().  The current file position is unchanged.\\\\n'\\n\"\n \" ' |      Returns the new absolute position.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  writable(self, /)\\\\n'\\n\"\n \" ' |      Returns True if the IO object can be written.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  write(self, s, /)\\\\n'\\n\"\n \" ' |      Write string to file.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      Returns the number of characters written, which is always equal \"\n \"to\\\\n'\\n\"\n \" ' |      the length of the string.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  \"\n \"----------------------------------------------------------------------\\\\n'\\n\"\n \" ' |  Data descriptors defined here:\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  closed\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  line_buffering\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  newlines\\\\n'\\n\"\n \" ' |      Line endings translated so far.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      Only line endings translated during reading are considered.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      Subclasses should override.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  \"\n \"----------------------------------------------------------------------\\\\n'\\n\"\n \" ' |  Methods inherited from _TextIOBase:\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  detach(...)\\\\n'\\n\"\n \" ' |      Separate the underlying buffer from the TextIOBase and return \"\n \"it.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      After the underlying buffer has been detached, the TextIO is in \"\n \"an\\\\n'\\n\"\n \" ' |      unusable state.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  \"\n \"----------------------------------------------------------------------\\\\n'\\n\"\n \" ' |  Data descriptors inherited from _TextIOBase:\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  encoding\\\\n'\\n\"\n \" ' |      Encoding of the text stream.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      Subclasses should override.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  errors\\\\n'\\n\"\n \" ' |      The error setting of the decoder or encoder.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      Subclasses should override.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  \"\n \"----------------------------------------------------------------------\\\\n'\\n\"\n \" ' |  Methods inherited from _IOBase:\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __del__(...)\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __enter__(...)\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __exit__(...)\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __iter__(self, /)\\\\n'\\n\"\n \" ' |      Implement iter(self).\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  fileno(self, /)\\\\n'\\n\"\n \" ' |      Returns underlying file descriptor if one exists.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      OSError is raised if the IO object does not use a file \"\n \"descriptor.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  flush(self, /)\\\\n'\\n\"\n \" ' |      Flush write buffers, if applicable.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      This is not implemented for read-only and non-blocking \"\n \"streams.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  isatty(self, /)\\\\n'\\n\"\n ' \" |      Return whether this is an \\'interactive\\' stream.\\\\n\"\\n'\n \" ' |      \\\\n'\\n\"\n ' \" |      Return False if it can\\'t be determined.\\\\n\"\\n'\n \" ' |  \\\\n'\\n\"\n \" ' |  readlines(self, hint=-1, /)\\\\n'\\n\"\n \" ' |      Return a list of lines from the stream.\\\\n'\\n\"\n \" ' |      \\\\n'\\n\"\n \" ' |      hint can be specified to control the number of lines read: no \"\n \"more\\\\n'\\n\"\n \" ' |      lines will be read if the total size (in bytes/characters) of \"\n \"all\\\\n'\\n\"\n \" ' |      lines so far exceeds hint.\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  writelines(self, lines, /)\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  \"\n \"----------------------------------------------------------------------\\\\n'\\n\"\n \" ' |  Data descriptors inherited from _IOBase:\\\\n'\\n\"\n \" ' |  \\\\n'\\n\"\n \" ' |  __dict__\\\\n'\\n\"\n \" '\\\\n')\\n\")\n"}